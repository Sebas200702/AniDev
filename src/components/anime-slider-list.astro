---
import AnimeCard from '@components/anime-card.astro'
import type { Anime } from 'types'

interface Props {
  animes: Anime[]
  title: string
}

const { animes, title } = Astro.props
---

<section
  class="relative mx-auto mt-6 w-[calc(100dvw-8px)]"
  id={`anime-slider-${title}`}
>
  <h2
    class="px-[calc(((100dvw-8px)/6.4)*0.2)] text-2xl font-bold text-gray-900"
  >
    {title}
  </h2>

  <div class="relative overflow-hidden">
    <button
      class="prev-button group absolute bottom-0 left-0 z-10 flex h-[92%] w-10 items-center justify-center rounded-lg bg-black/0 transition-all duration-300 ease-in-out hover:bg-gray-200/40 focus:outline-none"
      aria-label="Scroll to previous"
    >
      <svg
        class="rotate-180 transform opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100"
        xmlns="http://www.w3.org/2000/svg"
        width="32"
        height="32"
        fill="none"
        stroke="#000"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
      >
        <path d="M7 7l5 5-5 5M13 7l5 5-5 5"></path>
      </svg>
    </button>

    <ul
      class="no-scrollbar anime-list mx-auto mt-4 flex w-full flex-row overflow-x-auto scroll-smooth md:px-[calc(((100dvw-8px)/4.4)*0.2)] xl:px-[calc(((100dvw-8px)/6.4)*0.2)]"
    >
      {
        animes?.map((anime: Anime) => (
          <AnimeCard anime={anime} context={title} />
        ))
      }
    </ul>
  </div>

  <button
    class="next-button group absolute bottom-0 right-0 z-10 flex h-[92%] w-10 items-center justify-center rounded-lg bg-black/0 transition-all duration-300 ease-in-out hover:bg-gray-200/40 focus:outline-none"
    aria-label="Scroll to next"
  >
    <svg
      class="opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100"
      xmlns="http://www.w3.org/2000/svg"
      width="32"
      height="32"
      fill="none"
      stroke="#000"
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
    >
      <path d="M7 7l5 5-5 5M13 7l5 5-5 5"></path>
    </svg>
  </button>
</section>

<style>
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
</style>

<script is:inline>
  function init() {
    const width = window.innerWidth
    const $$ = (selector, parent) => {
      const el = parent
        ? parent.querySelectorAll(selector)
        : document.querySelectorAll(selector)
      return el ? el : null
    }

    const $nextButtons = $$('.next-button')
    const $prevButtons = $$('.prev-button')
    const $animeLists = $$('.anime-list')

    if ($nextButtons && $animeLists && $prevButtons) {
      if (width < 768) {
        $nextButtons.forEach((button) => {
          button.classList.replace('flex', 'hidden')
          button.disabled = true
        })
        $prevButtons.forEach((button) => {
          button.classList.replace('flex', 'hidden')
          button.disabled = true
        })
        return
      }

      $nextButtons.forEach((button, index) => {
        button.disabled = false
        button.classList.replace('hidden', 'flex')
        button.addEventListener('click', (e) =>
          handleScroll(e, 'next', index, width)
        )
      })
      $prevButtons.forEach((button, index) => {
        button.disabled = false
        button.classList.replace('hidden', 'flex')
        button.addEventListener('click', (e) =>
          handleScroll(e, 'prev', index, width)
        )
      })
      $animeLists.forEach((animeList, index) => {
        updateButtonState(animeList, $prevButtons[index], $nextButtons[index])
      })

      $animeLists.forEach((animeList, index) => {
        animeList.addEventListener('scroll', () => {
          updateButtonState(animeList, $prevButtons[index], $nextButtons[index])
        })
      })
    }

    function handleScroll(e, direction, index, width) {
      if (!$animeLists) return
      const $animeList = $animeLists[index]
      if (!$animeList) return

      const scrollAmount =
        width >= 1280
          ? 6 * ((width - 8) / 6.4) + 1
          : 4 * ((width - 8) / 4.4) + 1
      const scrollDistance = direction === 'next' ? scrollAmount : -scrollAmount

      $animeList.scrollBy({
        left: scrollDistance,
        behavior: 'smooth',
      })
    }

    function updateButtonState(animeList, prevButton, nextButton) {
      if (animeList.scrollLeft <= 0) {
        prevButton.disabled = true
        prevButton.classList.replace('flex', 'hidden')
      } else {
        prevButton.disabled = false
        prevButton.classList.replace('hidden', 'flex')
      }

      if (
        animeList.scrollLeft + animeList.clientWidth >=
        animeList.scrollWidth
      ) {
        nextButton.disabled = true
        nextButton.classList.replace('flex', 'hidden')
      } else {
        nextButton.disabled = false
        nextButton.classList.replace('hidden', 'flex')
      }
    }
  }

  document.addEventListener('DOMContentLoaded', init)
  document.addEventListener('astro:after-swap', init)
</script>
