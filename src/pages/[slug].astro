---
import { AnimeTag } from '@components/anime-tag'
import Layout from '@layouts/base.astro'
import { baseUrl } from '@utils/base-url'
import { AnimeEpisodes } from '@components/anime-episodes'
import { Image } from 'astro:assets'
import { slide } from 'astro:transitions'
import type { Anime } from '../types'
import { reduceSynopsis } from '@utils/reduce-synopsis'
import { normalizeString } from '@utils/normalize-string'
import { createImageUrlProxy } from '@utils/craete-imageurl-proxy'
import { getAnimeType } from '@utils/getanime-type'
import '@styles/fade-out.css'

const animeDataResponse = await fetch(
  `${baseUrl}/api/getAnime?slug=${Astro.params.slug}`,
  { cache: 'force-cache' }
)

if (!animeDataResponse.ok) {
  throw new Error(`Error fetching anime data: ${animeDataResponse.statusText}`)
}

const animeData: Anime | undefined = (await animeDataResponse.json()).anime

if (!animeData) {
  throw new Error('Anime data not found')
}

const {
  mal_id,
  title,
  image_webp,
  image_large_webp,
  banner_image,
  synopsis,
  genres,
  trailer_url,
  episodes,
  type,
} = animeData

const smallSynopsis = reduceSynopsis(synopsis, 600)
const slug = normalizeString(title)

const context =
  new URLSearchParams(Astro.url.search).get('context') ?? 'default'

const description = smallSynopsis || 'No description available'
const imageUrl = createImageUrlProxy(image_large_webp, '100', '1', 'webp')
---

<Layout>
  <head>
    <title>{title} - Anime Info</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image_large_webp} } />
    <meta property="og:type" content="website" />
  </head>
  <section class="flex flex-col gap-8 p-4 md:mx-20 xl:mx-40">
    <div
      class="absolute inset-0 -z-10 max-h-[calc(100dvh-300px)] w-full overflow-hidden"
    >
      <Image
        src={createImageUrlProxy(
          banner_image ?? image_large_webp,
          '0',
          '20',
          'webp'
        )}
        alt={`${title} banner`}
        loading="lazy"
        fetchpriority="high"
        class={`${
          banner_image
            ? 'xl:h-auto w-full h-full object-cover object-center'
            : '-my-96 aspect-[225/330] w-full opacity-85'
        }`}
        width={225}
        height={330}
        quality={10}
      />
      <div
        class="absolute inset-0 bg-[rgba(216,222,255,0.25)] backdrop-blur-[8px]"
      >
      </div>
      <div
        class="absolute bottom-0 left-0 h-1/2 w-full bg-gradient-to-b from-transparent to-[#fff]/100"
      >
      </div>
    </div>

    <article
      class="anime-info-container flex w-full flex-col items-center gap-4 md:mt-24 md:flex-row md:gap-20"
    >
      <picture class="aspect-[225/330] h-full w-full max-w-80 rounded-lg">
        <source
          srcset={createImageUrlProxy(image_large_webp, '600', '20', 'webp')}
          media="(max-width: 767px)"
          type="image/webp"
        />
        <source
          srcset={createImageUrlProxy(image_large_webp, '600', '20', 'webp')}
          media="(min-width: 768px)"
          type="image/webp"
        />
        <Image
          src={image_large_webp}
          alt={title}
          class="aspect-[225/330] h-full w-full max-w-80 rounded-lg transition-all ease-in-out"
          fetchpriority="high"
          transition:name={`${slug}_${mal_id}_${context}`}
          loading="lazy"
          width={225}
          height={330}
          quality={10}
        />
      </picture>

      <div
        class="flex w-full flex-col justify-center gap-4"
        transition:animate={slide({ duration: '0.4s' })}
      >
        <header class="flex w-full flex-col gap-4">
          <h2
            class="text-pretty text-3xl font-bold text-gray-900 md:text-wrap md:text-4xl xl:text-5xl"
          >
            {title}
          </h2>
          <AnimeTag tag={getAnimeType(type)} type={type} />
        </header>

        <p class="text-sm text-gray-800 md:text-base">{smallSynopsis}</p>

        <footer class="mt-10 flex flex-wrap gap-4">
          {
            genres.map((tag) => (
              <AnimeTag tag={tag} type={tag} style="w-auto" />
            ))
          }
        </footer>
      </div>
    </article>

    {
      trailer_url ? (
        <>
          <h2 class="text-pretty text-2xl font-bold text-gray-900">Trailer</h2>
          <div class="mx-auto mt-10 flex w-full flex-col gap-4 p-2 md:w-[70%]">
            <lite-youtube videoid={trailer_url.split('v=')[1]} loading="lazy" />
          </div>
        </>
      ) : (
        <div class="aspect-video h-full w-full rounded-sm" />
      )
    }

    <AnimeEpisodes
      totalEpisodes={episodes}
      client:visible
      mal_id={mal_id}
      slug={slug}
      image_webp={image_webp}
      synopsis={synopsis}
      context="anime-info"
    />
  </section>
</Layout>
