---
import Layout from '@layouts/base.astro'
import { AnimeEpisodes } from '@components/anime-episodes'
import { baseUrl } from '@utils/base-url'
import { NextPrevEpisodeBtn } from '@components/next-prev-episode-btn'
import type { Anime, AnimeEpisode } from 'types'
import { reduceString } from '@utils/reduce-string'
import { slide } from 'astro:transitions'
import { VideoPlayer } from '@components/player.jsx'

const getAnimeData = async (slug: string) => {
  try {
    const animeData = await fetch(`${baseUrl}/api/getAnime?slug=${slug}`, {
      cache: 'force-cache',
    })
      .then((res) => res.json())
      .then((data) => data.anime)
    return animeData
  } catch (error) {
    console.error('Error al obtener los datos del anime:', error)
    return null
  }
}

const getEpisodesData = async (mal_id: string) => {
  try {
    const response = await fetch(`${baseUrl}/api/episodes?id=${mal_id}`, {
      cache: 'force-cache',
    })
    const episodesData = await response.json()
    return episodesData.data as AnimeEpisode[]
  } catch (error) {
    console.error('Error al obtener los episodios:', error)
    return null
  }
}

const getEpisodeDetails = async (slug: string, episode: string) => {
  try {
    const response = await fetch(
      `${baseUrl}/api/getEpisode?slug=${slug}&ep=${episode}`
    )
    const data = await response.json()
    const { episode: episodeData } = data
    return {
      chapterImage: episodeData.image_url,
      episodeTitle: episodeData.title,
      episodeDescription: episodeData.description,
      anime_video_1: episodeData.anime_video_1,
      subtitles: episodeData.subtitles?.map((subtitle: string) => ({
        src: subtitle,
        kind: 'subtitles',
        srclang: 'en',
        label: 'English',
      })),
    }
  } catch (error) {
    console.error('Error al obtener los detalles del episodio:', error)
    return null
  }
}
const episode = new URLSearchParams(Astro.url.search).get('ep') ?? '1'
const [slugTitle, mal_id] = Astro.params.slug?.split('_') ?? ['', '']
const [animeData, episodes, episodeDetails] = await Promise.all([
  getAnimeData(Astro.params.slug ?? ''),
  getEpisodesData(mal_id),
  getEpisodeDetails(Astro.params.slug ?? '', episode),
])

if (!animeData || !episodes || !episodeDetails) return Astro.redirect('/404')

const {
  image_large_webp,
  synopsis,
  title,
  episodes: episodesLength,
  duration,
} = animeData as Anime
const description = reduceString(synopsis, 200) || 'No description available'

const {
  chapterImage,
  episodeTitle,
  episodeDescription,
  anime_video_1,
  subtitles,
} = episodeDetails
---

<Layout
  description={description}
  image={chapterImage ?? image_large_webp}
  title=`${title} - Episode: ${episode}`
  }
>
  <section
    class="xl:max-w-7x mx-auto mt-16 flex h-min w-full flex-col justify-center gap-8 overflow-hidden xl:max-h-[calc(100dvh-80px)] xl:flex-row"
    aria-label="Reproductor de episodios y lista de episodios"
  >
    <div
      class="mb-10 flex aspect-video w-full flex-col gap-3 p-4 md:relative md:mb-44 md:max-w-full xl:max-h-[calc(100dvh-80px)] xl:max-w-[60%]"
    >
      <div
        id="video-iframe"
        class="relative aspect-video w-full"
        transition:animate={slide({ duration: '0.4s' })}
      >
        {
          anime_video_1 ? (
            <VideoPlayer url={anime_video_1} sutitles={subtitles} client:load />
          ) : (
            <p class="text-center text-gray-500">
              El video no est√° disponible.
            </p>
          )
        }
      </div>
      <h3 class="h-auto p-4 text-xl font-bold text-white">
        {episodeTitle ?? '(Untitled)'} - {title} - Episode {episode}
      </h3>
      <p class="font-size-sm p-4 text-gray-400">{episodeDescription}</p>
    </div>
    <div class="rounded-lg border-2 border-[#121212] bg-[#1c1c1c] p-4 xl:mt-0">
      <div
        class={`flex justify-between ${
          episode === '1' ? 'flex-row-reverse' : 'flex-row'
        }`}
      >
        <NextPrevEpisodeBtn
          client:visible
          episodesLength={episodes.length}
          currentEpisode={parseInt(episode)}
          action="Previous"
          slug={Astro.params.slug ?? ''}
        />
        <NextPrevEpisodeBtn
          client:visible
          episodesLength={episodes.length}
          currentEpisode={parseInt(episode)}
          action="Next"
          slug={Astro.params.slug ?? ''}
        />
      </div>
      <div class="relative mx-auto flex h-full xl:w-96">
        <AnimeEpisodes
          totalEpisodes={episodesLength}
          client:load
          mal_id={parseInt(mal_id)}
          slug={title}
          image_webp={image_large_webp}
          currentEpisode={parseInt(episode)}
          duration={duration}
        />
        <div
          class="absolute bottom-0 left-0 h-1/4 w-full rounded-lg bg-gradient-to-b from-transparent to-secondary"
        >
        </div>
      </div>
    </div>
  </section>
</Layout>

<script is:inline>
  function init() {
    const image = document.querySelector('#chapter-image')
    if (!image) return
    console.log(image)
    image.addEventListener('click', () => {
      image.classList.add('opacity-0')
      setTimeout(() => {
        image.classList.replace('flex', 'hidden')
      }, 300)
    })
  }

  document.addEventListener('DOMContentLoaded', init)
  document.addEventListener('astro:after-swap', init)
</script>
