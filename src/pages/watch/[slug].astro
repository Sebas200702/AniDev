---
import Layout from '@layouts/base.astro'
import AnimeEpisodesList from '@components/watch-anime/episodes/anime-episode-list.astro'
import { baseUrl } from '@utils/base-url'
import { CreateMetaDatas } from '@components/create-meta-datas'
import { baseTitle } from '@utils/base-url'

import type { Anime, AnimeEpisode } from 'types'

import { slide } from 'astro:transitions'
import { VideoPlayer } from '@components/watch-anime/player/player.jsx'
import Footer from '@components/watch-anime/episodes/footer.astro'

const getAnimeData = async (slug: string) => {
  try {
    const animeData = await fetch(`${baseUrl}/api/getAnime?slug=${slug}`, {
      cache: 'force-cache',
    })
      .then((res) => res.json())
      .then((data) => data.anime)
    return animeData
  } catch (error) {
    console.error('Error al obtener los datos del anime:', error)
    return null
  }
}

const getEpisodesData = async (mal_id: string) => {
  try {
    const response = await fetch(`${baseUrl}/api/episodes?id=${mal_id}`, {
      cache: 'force-cache',
    })
    const episodesData = await response.json()
    return episodesData.data as AnimeEpisode[]
  } catch (error) {
    console.error('Error al obtener los episodios:', error)
    return null
  }
}

const getEpisodeDetails = async (slug: string, episode: string) => {
  try {
    const response = await fetch(
      `${baseUrl}/api/getEpisode?slug=${slug}&ep=${episode}`
    )
    const data = await response.json()
    const { episode: episodeData } = data
    return {
      chapterImage: episodeData.image_url,
      episodeTitle: episodeData.title,
      episodeDescription: episodeData.description,
      anime_video_1: episodeData.anime_video_1,
      subtitles: episodeData.subtitles?.map((subtitle: string) => ({
        src: subtitle,
        kind: 'subtitles',
        srclang: 'en',
        label: 'English',
      })),
    }
  } catch (error) {
    console.error('Error al obtener los detalles del episodio:', error)
    return null
  }
}
const episode = new URLSearchParams(Astro.url.search).get('ep') ?? '1'
const [slugTitle, mal_id] = Astro.params.slug?.split('_') ?? ['', '']
const [animeData, episodes, episodeDetails] = await Promise.all([
  getAnimeData(Astro.params.slug ?? ''),
  getEpisodesData(mal_id),
  getEpisodeDetails(Astro.params.slug ?? '', episode),
])

if (!animeData || !episodes || !episodeDetails) return Astro.redirect('/404')

const {
  image_large_webp,
  synopsis,
  title,
  episodes: episodesLength,
  duration,
} = animeData as Anime
const description = synopsis || 'No description available'
const seoTitle = `${title} -  ${baseTitle}`
const {
  chapterImage,
  episodeTitle,
  episodeDescription,
  anime_video_1,
  subtitles,
} = episodeDetails
---

<Layout
>
  <CreateMetaDatas title={seoTitle} description={episodeDescription ?? description} image={chapterImage ?? image_large_webp} />
  <section
    class="xl:w-full mx-auto mt-20 flex h-min w-full flex-col justify-center gap-20 overflow-hidden md:px-20 p-4 xl:max-h-[calc(100dvh-80px)] xl:flex-row"
    aria-label="Reproductor de episodios y lista de episodios"
  >
    <div
      class="mb-10 flex aspect-[16/9] w-full flex-col gap-5 md:relative md:mb-44 md:max-w-full xl:max-h-[calc(100dvh-80px)] "
    >
      <div
        id="video-iframe"
        class="relative flex aspect-[16/9] h-full w-full items-center justify-center bg-Complementary rounded-lg"
        transition:animate={slide({ duration: '0.4s' })}
      >
        {
          anime_video_1 ? (
            <VideoPlayer url={anime_video_1} sutitles={subtitles} client:load />
          ) : (
            <p class="text-center text-Primary-200 text-l">
              El video no est√° disponible.
            </p>
          )
        }
      </div>
      <Footer
        episodeTitle={episodeTitle}
        title={title}
        episodeDescription={episodeDescription}
        episode={episode}
      />
    </div>
    <AnimeEpisodesList
      episodesLength={episodesLength}
      currentEpisode={parseInt(episode)}
      duration={duration}
      mal_id={mal_id}
      slug={slugTitle}
      image_webp={image_large_webp}
      title={title}
      episode={episode}
      image_large_webp={image_large_webp}
    />
  </section>
</Layout>

<script is:inline>
  function init() {
    const image = document.querySelector('#chapter-image')
    if (!image) return
    image.addEventListener('click', () => {
      image.classList.add('opacity-0')
      setTimeout(() => {
        image.classList.replace('flex', 'hidden')
      }, 300)
    })
  }

  document.addEventListener('DOMContentLoaded', init)
  document.addEventListener('astro:after-swap', init)
</script>
