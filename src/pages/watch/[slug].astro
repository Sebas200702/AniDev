---
import Layout from '@layouts/base.astro'
import { AnimeEpisodes } from '@components/anime-episodes'
import { baseUrl } from '@utils/base-url'
import { NextPrevEpisodeBtn } from '@components/next-prev-episode-btn'
import type { AnimeEpisode } from 'types'

const episode = new URLSearchParams(Astro.url.search).get('ep') ?? '1'
const [title, mal_id] = Astro.params.slug?.split('_') ?? ['', '']

const [responseEpisodes, animeInfo] = await Promise.all([
  fetch(`${baseUrl}/api/episodes?id=${mal_id}`, { cache: 'force-cache' }).then(
    (res) => res.json()
  ),
  fetch(`${baseUrl}/api/getAnime?slug=${Astro.params.slug}`)
    .then((res) => res.json())
    .then((data) => data.anime),
])

const { image_webp, synopsis } = animeInfo
const episodes: AnimeEpisode[] = responseEpisodes.data

let video_url = ''
try {
  const response = await fetch(
    `${baseUrl}/api/getEpisode?slug=${Astro.params.slug}&ep=${episode}`
  )
  const data = await response.json()
  video_url = data.episode.video_url
} catch (error) {
  console.error('Error al obtener el video:', error)
}
---

<Layout>
  <section
    class="xl:max-w-7x mx-auto flex h-min w-full flex-col justify-center gap-4 overflow-hidden xl:max-h-[calc(100dvw/2.4)] xl:flex-row"
    aria-label="Reproductor de episodios y lista de episodios"
  >
    <div
      class="mb-10 flex aspect-video w-full flex-col gap-3 p-2 md:relative md:max-w-full xl:max-h-[calc(100dvw/2.7)] xl:max-w-[68%]"
    >
      {
        video_url ? (
          <div class="relative aspect-video w-full">
            <lite-iframe
              class="rounded-lg"
              id="lite-iframe"
              src={video_url}
              frameborder="0"
              allowtransparency="true"
              allowfullscreen="true"
              marginwidth="0"
              marginheight="0"
              scrolling="no"
              sambox="allow-scripts block-all"
              aria-label={`Video del episodio ${episode} de ${title}`}
              title={`Video del episodio ${episode} de ${title}`}
            />
          </div>
        ) : (
          <p class="text-center text-gray-500">El video no est√° disponible.</p>
        )
      }
      <div
        class={`flex justify-between ${
          episode === '1' ? 'flex-row-reverse' : 'flex-row'
        }`}
      >
        <NextPrevEpisodeBtn
          client:visible
          episodesLength={episodes.length}
          currentEpisode={parseInt(episode)}
          action="Prev"
          slug={Astro.params.slug ?? ''}
        />
        <NextPrevEpisodeBtn
          client:visible
          episodesLength={episodes.length}
          currentEpisode={parseInt(episode)}
          action="Next"
          slug={Astro.params.slug ?? ''}
        />
      </div>
    </div>

    <AnimeEpisodes
      totalEpisodes={animeInfo.episodes}
      client:load
      mal_id={animeInfo.mal_id}
      slug={title}
      image_webp={image_webp}
      synopsis={synopsis}
      context="watch"
      currentEpisode={parseInt(episode)}
    />
  </section>
</Layout>
